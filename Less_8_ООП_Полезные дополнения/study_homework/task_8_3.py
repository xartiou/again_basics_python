"""
3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере.
Необходимо запрашивать у пользователя данные и заполнять список.
Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована.
Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
При этом скрипт завершается, сформированный список выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
только если введено число.
Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
При этом работа скрипта не должна завершаться.
"""


class OnlyIntList(Exception):
    def __init__(self, mess):
        self.mess = mess

    @staticmethod
    def valid_number(number):
        try:
            return True if float(number) else True
        except ValueError:
            return False


def main():
    my_list = []
    while True:
        number = input('Введите число или "q" для выхода: ')
        if number == 'q':
            break
        try:
            if OnlyIntList.valid_number(number):
                my_list.append(float(number))
            else:
                raise OnlyIntList("Вы ввели не число!")
        except OnlyIntList as ex:
            print(ex)
            continue
    print(my_list)


if __name__ == '__main__':
    main()

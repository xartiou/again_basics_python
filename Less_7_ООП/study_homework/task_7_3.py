"""
3. Реализовать программу работы с органическими клетками.
Необходимо создать класс Клетка.
В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов:
сложение (__add__()),
вычитание (__sub__()),
умножение (__mul__()),
деление (__truediv__()).
Данные методы должны применяться только к клеткам и выполнять
увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
В методе деления должно осуществляться округление значения до целого числа.
Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если
 разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
Умножение. Создается общая клетка из двух.
Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
Деление. Создается общая клетка из двух.
Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
 Тогда метод make_order() вернет строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
 Тогда метод make_order() вернет строку: *****\n*****\n*****.
"""


class Cell:
    """Класс Клетка"""
    def __init__(self, count_cell):
        """count_cell - параметр, соответствующий количеству клеток (целое число)"""
        self.count_cell = count_cell

    def make_order(self, rows):
        """Данный метод позволяет организовать ячейки по рядам.
        rows - количество ячеек в ряду"""
        print("Визуализируем клетки по рядам.")
        return '\n'.join(['*' * rows for _ in range(self.count_cell // rows)]) + '\n' + '*' * (self.count_cell % rows)

    """В классе должны быть реализованы методы перегрузки арифметических операторов: 
        сложение (__add__()), 
        вычитание (__sub__()), 
        умножение (__mul__()), 
        деление (__truediv__())."""
    def __str__(self):
        return f"{self.count_cell}"

    def __add__(self, other):
        print("Объединение двух клеток.")
        return Cell(self.count_cell + other.count_cell)

    def __sub__(self, other):
        print("Разность количества ячеек: ")
        return Cell(self.count_cell - other.count_cell) if self.count_cell - other.count_cell > 0 \
            else "Ячеек в первой клетке меньше второй, вычитание невозможно!"

    def __mul__(self, other):
        print("Умножение. Создается общая клетка из двух: ")
        return Cell(self.count_cell * other.count_cell)

    def __truediv__(self, other):
        print("Деление. Создается общая клетка из двух.")
        return Cell(self.count_cell // other.count_cell) if other.count_cell != 0 \
            else "ZeroDivisionError"

    def __floordiv__(self, other):
        print("Деление. Создается общая клетка из двух.")
        return Cell(self.count_cell // other.count_cell) if other.count_cell != 0 \
            else "ZeroDivisionError"


cell_1 = Cell(48)
cell_2 = Cell(25)

print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(cell_1 // cell_2)
print(cell_1.make_order(6))
print(cell_2.make_order(10))
